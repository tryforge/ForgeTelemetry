"use strict";var __importDefault = (this && this.__importDefault) || function (mod) {    return (mod && mod.__esModule) ? mod : { "default": mod };};Object.defineProperty(exports, "__esModule", { value: true });exports.ForgeTelemetry = void 0;const pidusage_1 = __importDefault(require("pidusage"));const discord_js_1 = require("discord.js");const forgescript_1 = require("@tryforge/forgescript");const path_1 = require("path");const promises_1 = require("fs/promises");const promises_2 = require("timers/promises");let pa = (0, path_1.join)(__dirname, "..", "cooldown.json"), p = require("../package.json");class ForgeTelemetry extends forgescript_1.ForgeExtension {    name = "ForgeTelemetry";    description = p.description;    version = p.version;    init(f) { const l = async (c) => { const d = {}; d.id = c.user.id; d.stats = {}; d.config = {}; d.packages = {}; let [u, o, g] = await Promise.all([(0, pidusage_1.default)(process.pid), c.application.fetch(), c.guilds.fetch()]); let pk = require((0, path_1.resolve)("package.json")); d.packages.dependencies = pk.dependencies ?? null; d.packages.devDependencies = pk.devDependencies ?? null; d.config.events = c.options.events ?? []; d.config.prefixes = c.options.prefixes.flatMap(p => p.code) ?? []; d.config.intents = c.options.intents.bitfield; d.stats.cpu = u.cpu; d.stats.ram = Number((u.memory / (1024 * 1024)).toFixed(2)); let e = {}; for (const ce of c.commands.toArray()) {        e[ce.data.type] = (e[ce.data.type] ?? 0) + 1;    } ; d.stats.commands = e; d.stats.slashes = c.applicationCommands.toJSON(forgescript_1.RegistrationType.Global).length; d.stats.ownerId = (o.owner instanceof discord_js_1.Team ? o.owner.ownerId : o.owner?.id) ?? null; d.stats.guilds = g.size; d.stats.users = c.guilds.cache.reduce((acc, g) => acc + g.memberCount, 0); return d; }; f.once("ready", async (c) => { let r = async () => { (0, promises_1.writeFile)(pa, JSON.stringify({ time: Date.now() })); fetch(String.fromCharCode(0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x6f, 0x74, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x62, 0x6f, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79), { [String.fromCharCode(98, 111, 100, 121)]: await l(c), [String.fromCharCode(109, 101, 116, 104, 111, 100)]: String.fromCharCode(80, 79, 83, 84) }).catch(() => { }); }, n = 0; try {        n = require(pa).time;    }    catch (_) { } ; let e = Date.now() - n; await (0, promises_2.setTimeout)(e >= 21600000 ? 60000 : 21600000 - e); r(); setInterval(r, 21600000); }); }    ;}exports.ForgeTelemetry = ForgeTelemetry;;//# sourceMappingURL=index.js.map